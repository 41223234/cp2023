<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<h1>5w</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>6w</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);
  
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 国旗颜色
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 计算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋转角度（以弧度为单位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的颜色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img caption="false" height="211" src="/images/usa_flag.png" width="400"/></p>
<h1>7w</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_chinese_flag(gdImagePtr img);

int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度

    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);

    draw_chinese_flag(im);

    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}

// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;

    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);

    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);

    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);

    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;

    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }

    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );

int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_japan_flag(img);

    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes


    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);


    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;

    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    // 绘制英国国旗
    draw_uk_flag(img);

    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}



void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色

    gdImageFilledRectangle(img, 0, 0, width, height, blue);


  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);

    int x1, y1, x2, y2, x3, y3;

    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);

    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);


    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);

  int x1, y1, x2, y2, x3, y3;

  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );


  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  }

    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;

    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"

int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;

    im = gdImageCreate(WIDTH, HEIGHT);

    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);

    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);

    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);

    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);

  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     

  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);

  int circleX2 = 515;    // 圓心的 X 座標
  
 int circleY2 = 337.5;

  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);
  
  {
    
  
  // 起點和終點位置
  
  int startX = 340;    
  // 線的起點 X 座標
  
  int startY = 90;   
  // 線的起點 Y 座標
  
  int endX = 200;     
  // 線的終點 X 座標
  
  int endY = 260;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 270;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 210;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);

  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置
  
  int startX = 330;    
  // 線的起點 X 座標
  
  int startY = 520;   
  // 線的起點 Y 座標
  
  int endX = 190;     
  // 線的終點 X 座標
  
  int endY = 350;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }

  {
    // 起點和終點位置
  
  int startX = 564;    
  // 線的起點 X 座標
  
  int startY = 520;   
  // 線的起點 Y 座標
  
  int endX = 704;     
  // 線的終點 X 座標
  
  int endY = 350;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
    
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);
    
gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);
    
  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置
  
  int startX = 330;    
  // 線的起點 X 座標
  
  int startY = 520;   
  // 線的起點 Y 座標
  
  int endX = 190;     
  // 線的終點 X 座標
  
  int endY = 350;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }
  {
    // 起點和終點位置
  
  int startX = 564;    
  // 線的起點 X 座標
  
  int startY = 97;   
  // 線的起點 Y 座標
  
  int endX = 704;     
  // 線的終點 X 座標
  
  int endY = 267;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
    
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);
    
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);
    
  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 277;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 217;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);

    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);

  }
  
    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p><img alt="" height="267" src="/images/korea_flag.png" width="400"/></p>
<h1>12w</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">	#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
int main() {
    int width = 800;
    int height = 600;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {
 
fprintf(stderr, "Error opening the output file.\n");
 
return 1;
    }
    
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);
    
    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);
    
    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);
 
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><br/><br/><img alt="" height="300" src="/images/hellogd.png" width="400"/></p>
<h1>13w</h1>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }
 
    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time
 
    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;
 
        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);
 
        t += dt;
    }
 
    // Close the data file
    fclose(outputFile);
 
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
 
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");
 
    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);
 
    return 0;
}</pre>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>ANSIC</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。

float temp_f;     /* 華氏度數 */
float temp_c;     /* 攝氏度數 */
char line_text[50];        /* 一行輸入 */

int main() {
    printf("輸入溫度（攝氏度）：");  // 提示用戶輸入攝氏溫度。
    fgets(line_text, sizeof(line_text), stdin);      // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%f", &amp;temp_c);               // 將 'line_text' 中的輸入轉換為浮點數，並將其存儲在 'temp_c' 中。

    temp_f = ((9.0 / 5.0) * temp_c) + 32.0;         // 將溫度從攝氏轉換為華氏，並將其存儲在 'temp_f' 中。
    printf("%f 度華氏。\n", temp_f);    // 以華氏度打印溫度。

    return 0;   // 返回0以指示程序成功執行。
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 014400.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。

float myradius;          /* 球體的半徑 */
float myvolume;          /* 球體的體積（待計算） */
char line_text[50];      /* 來自鍵盤的一行輸入 */

/* 從維基百科獲取的π值，精確到小數點後50位 */
const float PI = 3.6939937510;

int main() {
    printf("輸入球體的半徑：");  // 提示用戶輸入球體的半徑。
    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%f", &amp;myradius);           // 將 'line_text' 中的輸入轉換為浮點數，並將其存儲在 'myradius' 中。

    myvolume = (4.0 / 3.0) * PI * (myradius * myradius * myradius);  /* 使用體積計算公式計算球體的體積。 */
    printf("球體的體積是 %f。\n", myvolume);  // 打印計算出的球體的體積。

    return 0;   // 返回0以指示程序成功執行。
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 015230.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。
int main() {
    float rec_width;         /* 宣告變量 'rec_width' 來存儲矩形的寬度 */
    float rec_height;        /* 宣告變量 'rec_height' 來存儲矩形的高度 */
    float rec_perimeter;     /* 宣告變量 'rec_perimeter' 來存儲周長（待計算） */

    // 提示用戶輸入矩形的高度。
    printf("輸入矩形的高度：");
    scanf("%f", &amp;rec_height);  // 從用戶讀取 'rec_height' 的值。

    // 提示用戶輸入矩形的寬度。
    printf("輸入矩形的寬度：");
    scanf("%f", &amp;rec_width);  // 從用戶讀取 'rec_width' 的值。

    // 使用公式計算矩形的周長：周長 = 2 * (寬度 + 高度)
    rec_perimeter = 2.0 * (rec_height + rec_width);

    // 打印計算出的矩形的周長。
    printf("矩形的周長是：%f\n", rec_perimeter);

    return 0;  // 表示程序成功執行。
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 015746.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。

float kmph;              /* 每小時公里數 */
float miph;              /* 每小時英里數（待計算） */
char  line_text[50];      /* 來自鍵盤的一行輸入 */

int main()
{
    printf("輸入每小時公里數：");   // 提示用戶輸入每小時公里數。
    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%f", &amp;kmph);   // 將輸入轉換為浮點數，並將其存儲在 'kmph' 中。

    miph = (kmph * 0.6213712);   // 將每小時公里數轉換為每小時英里數。
    printf("%f 英里每小時\n", miph);   // 以英里每小時的單位打印結果。

    return 0;   // 返回0以指示程序成功執行。
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 020442.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。

int tot_mins;  /* 指定的總分鐘數 */
int hrs;          /* 小時數（待計算） */
int mins;        /* 分鐘數（待計算） */

const int MINaHOUR = 60;      /* 一小時的分鐘數 */

char line_text[50];      /* 來自鍵盤的一行輸入 */

int main() {
    printf("輸入總分鐘數：");   // 提示用戶輸入總分鐘數。
    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%d", &amp;tot_mins);   // 將輸入轉換為整數，並將其存儲在 'tot_mins' 中。

    hrs = (tot_mins / MINaHOUR);   // 計算小時數。
    mins = (tot_mins % MINaHOUR);   // 計算剩餘分鐘數。

    printf("%d 小時，%d 分鐘。\n", hrs, mins);   // 打印計算出的小時數和分鐘數。

    return 0;   // 返回0以指示程序成功執行。
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 020836.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。

int hrs;          /* 指定的小時數 */
int mins;         /* 指定的分鐘數 */
int tot_mins;     /* 總分鐘數（待計算） */

const int MINaHOUR = 60;      /* 一小時的分鐘數 */

char line_text[50];      /* 來自鍵盤的一行輸入 */

int main() {
    printf("輸入小時數：");   // 提示用戶輸入小時數。
    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%d", &amp;hrs);   // 將輸入轉換為整數，並將其存儲在 'hrs' 中。

    printf("輸入分鐘數：");   // 提示用戶輸入分鐘數。
    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%d", &amp;mins);   // 將輸入轉換為整數，並將其存儲在 'mins' 中。

    tot_mins = mins + (hrs * MINaHOUR);   // 計算總分鐘數。

    printf("總共：%d 分鐘。\n", tot_mins);   // 打印總分鐘數。

    return 0;   // 返回0以指示程序成功執行。
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 021231.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;    // 包含標準輸入/輸出頭文件。

int main() {
    char firstname[20], lastname[20];   // 声明字符數組來存儲名字和姓氏，每個數組的最大大小為20個字符。
    int bir_year;   // 声明一個整數變量 'bir_year' 來存儲出生年份。

    printf("輸入您的名字：");   // 提示用戶輸入他們的名字。
    scanf("%s", firstname);   // 讀取並存儲用戶的輸入在 'firstname' 中。

    printf("輸入您的姓氏：");   // 提示用戶輸入他們的姓氏。
    scanf("%s", lastname);   // 讀取並存儲用戶的輸入在 'lastname' 中。

    printf("輸入您的出生年份：");   // 提示用戶輸入他們的出生年份。
    scanf("%d", &amp;bir_year);   // 讀取並存儲用戶的輸入在 'bir_year' 中。

    printf("%s %s %d\n", firstname, lastname, bir_year);   // 打印名字、姓氏和出生年份。

    return 0;   // 返回0以表示程序成功執行。
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 021538.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。

int num1, num2, num3;   /* 宣告三個變數 */
int sum;                /* 用於存儲數字總和的變數 */
char line_text[50];     /* 來自鍵盤的一行輸入 */ 

int main() 
{  
    printf("輸入三個以逗號分隔的數字：");   // 提示用戶輸入三個以逗號分隔的數字。
    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%d, %d, %d", &amp;num1, &amp;num2, &amp;num3);   // 將輸入轉換為整數，並分別存儲在 'num1'、'num2' 和 'num3' 中。
    sum = num1 + num2 + num3;   // 計算這三個數字的總和。
    printf("三個數字的總和：%d\n", sum);   // 打印這三個數字的總和。  
    return 0;   // 返回0以表示程序成功執行。  
}  
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 021803.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;    // 包含標準輸入/輸出頭文件。

int main()  
{  
    int num1, num2;   // 宣告兩個整數變數 'num1' 和 'num2'。
    int sum, sub, mult, mod;   // 宣告變數來存儲算術運算的結果。
    float div;   // 宣告一個浮點變數 'div' 來存儲除法的結果。

    /* 
     * 從用戶讀取兩個以逗號分隔的數字 
     */  
    printf("輸入任意兩個以逗號分隔的數字：");   // 提示用戶輸入兩個以逗號分隔的數字。
    scanf("%d,%d", &amp;num1, &amp;num2);   // 讀取並存儲用戶的輸入在 'num1' 和 'num2' 中。

    /* 
     * 執行所有算術運算 
     */   
    sum = num1 + num2;   // 計算 'num1' 和 'num2' 的和。
    sub = num1 - num2;   // 計算 'num1' 和 'num2' 的差。
    mult = num1 * num2;  // 計算 'num1' 和 'num2' 的積。
    div = (float)num1 / num2;   // 計算 'num1' 除以 'num2' 的商，並將結果轉換為浮點數。
    mod = num1 % num2;   // 計算 'num1' 和 'num2' 的餘數。

    /* 
     * 打印所有算術運算的結果 
     */  
    printf("給定數字的和：%d\n", sum);   // 打印和。
    printf("給定數字的差：%d\n", sub);   // 打印差。
    printf("給定數字的積：%d\n", mult);   // 打印積。
    printf("給定數字的商：%f\n", div);   // 打印商。
    printf("餘數 = %d\n", mod);   // 打印餘數。

    return 0;   // 返回0以表示程序成功執行。   
}
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 022031.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()  
{  
    int ang1, ang2, ang3; /* 定義三角形的三個角度  */

    /* 從用戶讀取三角形的兩個角度，以逗號分隔*/  
    printf("輸入三角形的兩個角度，以逗號分隔：");  
    scanf("%d, %d", &amp;ang1, &amp;ang2);  

    ang3 = 180 - (ang1 + ang2);  /* 計算第三個角度  */

    printf("三角形的第三個角度為：%d\n", ang3);  

    return 0;  
}  
</pre>
<p><img alt="" height="225" src="/images/螢幕擷取畫面 2023-12-21 022031.png" width="400"/></p>
<h1>C.EX1</h1>
<h2>1.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
/* 讀取並顯示一個字符 */
int main () {
 char c;
 printf("輸入字符: ");
 c = getchar(); /* 讀取輸入的字符 */
 printf("輸入的字符為: ");
 putchar(c); /* 顯示輸入的字符 */
 return(0);
}
</pre>
<p><img alt="" height="176" src="/images/螢幕擷取畫面 2023-12-21 045102.png" width="400"/></p>
<h2>2.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS  // 用於禁用scanf的安全性警告
#include&lt;stdio.h&gt;

int main()
{
    int this_is_a_number1, this_is_a_number2, total;
    printf("請輸入一個整數：\n ");
    scanf("%d", &amp;this_is_a_number1);  // 讀取輸入的數字
    printf("你輸入了 %d\n", this_is_a_number1);
    
    printf("請輸入另一個整數：\n");
    scanf("%d", &amp;this_is_a_number2);  // 讀取輸入的數字
    printf("你輸入了 %d\n", this_is_a_number2);
    
    total = this_is_a_number1 + this_is_a_number2;  // 將兩個數字相加
    printf("總和為 %d\n", total);
    
    return 0;
}
</pre>
<p><img alt="" height="261" src="/images/螢幕擷取畫面 2023-12-21 045200.png" width="400"/></p>
<h2>3.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; /* 展示使用 goto 语句 */
int main()
{
    int i, testvalue;
    testvalue = 2;
    for (i = 0; i &lt; 10; i++)
    {
        if (testvalue == 2)
            goto error;
    }
    printf("正常退出循环\n");
error:
    printf("testvalue 是 %d\n", testvalue);
    return 0;
}
</pre>
<p><img alt="" height="116" src="/images/螢幕擷取畫面 2023-12-21 045231.png" width="400"/></p>
<h2>4.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;

/* 2D數組示例 */
int main()
{
    int arr1[7][8]; /* 2D數組 */
    int i, j, k, l;

    printf("輸入行和列的數量（最多7行，最多8列） \n");
    scanf("%d %d", &amp;k, &amp;l);

    if (k &gt; 7 || l &gt; 8)
    {
        printf("錯誤 - 行的最大值為8，列的最大值為7 \n");
    }
    else
    {
        printf("輸入數組元素\n");

        for (i = 0; i &lt; k; i++)
        {
            for (j = 0; j &lt; l; j++)
            {
                scanf("%d", &amp;arr1[i][j]);
            }
        }

        printf("你的數組是 \n");

        for (i = 0; i &lt; k; i++)
        {
            for (j = 0; j &lt; l; j++)
            {
                printf("%d ", arr1[i][j]);
            }
            printf("\n");
        }
    }

    return 0;
}
</pre>
<p><img alt="" height="243" src="/images/螢幕擷取畫面 2023-12-21 045311.png" width="400"/></p>
<h2>5.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* 使用 switch 語句對字符進行操作的示例 */
int main()
{
    char this_is_a_character;

    printf("請輸入字符 a, b, c, d 或 e：\n ");
    scanf("%c", &amp;this_is_a_character);

    switch (this_is_a_character)
    {
    case 'a':
        printf("你輸入了 a");
        break;
    case 'b':
        printf("你輸入了 b");
        break;
    case 'c':
        printf("你輸入了 c");
        break;
    case 'd':
        printf("你輸入了 d");
        break;
    case 'e':
        printf("你輸入了 e");
        break;
    default:
        printf("默認 ");
    }

    return 0;
}
</pre>
<p><img alt="" height="147" src="/images/螢幕擷取畫面 2023-12-21 045351.png" width="400"/></p>
<h2>6.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* if、else if 和 else 操作的示例 */
int main()
{
    int this_is_a_number;

    printf("請輸入介於1和10之間的整數：\n ");
    scanf("%d", &amp;this_is_a_number);

    if (this_is_a_number &lt; 6)
        printf("這個數小於6；\n ");

    printf("請輸入介於10和20之間的整數：\n ");
    scanf("%d", &amp;this_is_a_number);

    if (this_is_a_number &lt; 16)
    {
        printf("這個數小於16\n ");
    }
    else if (this_is_a_number == 20)
    {
        printf("這個數是20\n ");
    }
    else
    {
        printf("這個數大於15\n ");
    }

    return 0;
}
</pre>
<p><img alt="" height="160" src="/images/螢幕擷取畫面 2023-12-21 045530.png" width="400"/></p>
<h2>7.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;

/* 顯示字符數組用法的程式 */
int main()
{
    char arr2[10]; /* 定義包含10個字符的數組 */
    int i;

    printf("輸入10個字符 \n");

    for (i = 0; i &lt; 10; i++)
    {
        scanf("%c", &amp;arr2[i]);
    }

    printf("你的10個字符是 \n");

    for (i = 0; i &lt; 10; i++)
    {
        printf("%c ", arr2[i]);
    }

    printf("\n");

    return 0;
}
</pre>
<p><img alt="" height="211" src="/images/螢幕擷取畫面 2023-12-21 045611.png" width="400"/></p>
<h2>8.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;

/* 二維數組測試的示例 */
int main()
{
    int arr1[7][8];
    int i, j, k, l;

    printf("輸入行數和列數（最多7行最多8列）\n");
    scanf("%d %d", &amp;k, &amp;l);

    if (k &gt; 7 || l &gt; 8)
    {
        printf("錯誤 — 行數最多為8，列數最多為7 \n");
    }
    else
    {
        printf("輸入數組\n");

        for (i = 0; i &lt; k; i++)
        {
            for (j = 0; j &lt; l; j++)
            {
                scanf("%d", &amp;arr1[i][j]);
            }
        }

        printf("你的數組是 \n");

        for (i = 0; i &lt; k; i++)
        {
            for (j = 0; j &lt; l; j++)
            {
                printf("%d ", arr1[i][j]);
            }
            printf("\n");
        }
    }

    printf("數組的第一行\n");

    for (j = 0; j &lt; l; j++)
    {
        printf("%d ", arr1[0][j]);
    }

    printf("\n");

    return 0;
}
</pre>
<p><img alt="" height="258" src="/images/螢幕擷取畫面 2023-12-21 045713.png" width="400"/></p>
<h2>9.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* 這段代碼演示了一個函數的作用 */
/* 這個函數比較兩個數字的大小 */
/* 用戶輸入三個數字，並得知它們的大小關係 */

void myfunction(int a, int b); /* 函數的聲明和其參數 */

int first, second, third;

int main()
{
    printf("請輸入第一個整數：");
    scanf("%d", &amp;first);

    printf("請輸入第二個整數：");
    scanf("%d", &amp;second);

    printf("請輸入第三個整數：");
    scanf("%d", &amp;third);

    myfunction(first, second);
    myfunction(first, third);
    myfunction(second, third);

    return 0;
}

void myfunction(int a, int b)
{
    /* 這個函數位於程序的 main{} 部分之外 */
    /* 這個函數僅比較兩個參數 a 和 b，並說明哪個更大 */
    if (a &gt; b)
        printf("%d 大於 %d\n", a, b);
    else if (a &lt; b)
        printf("%d 大於 %d\n", b, a);
    else
        printf("%d 和 %d 相等\n", a, b);
}
</pre>
<p><img alt="" height="274" src="/images/螢幕擷取畫面 2023-12-21 045857.png" width="400"/></p>
<h2>10.</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;

/* 函數的例子 */
void printarow(int row, int cols, int arr[8][8]);

int main()
{
    int arr1[8][8];
    int i, j, rows, cols;

    printf("輸入行數和列數（最多8行最多8列）\n");
    scanf("%d %d", &amp;rows, &amp;cols);

    if (rows &gt; 8 || cols &gt; 8)
    {
        printf("錯誤 — 行數最多為8，列數最多為8\n");
    }
    else
    {
        printf("輸入數組\n");

        for (i = 0; i &lt; rows; i++)
        {
            for (j = 0; j &lt; cols; j++)
            {
                scanf("%d", &amp;arr1[i][j]);
            }
        }

        printf("你的數組是 \n");

        for (i = 0; i &lt; rows; i++)
        {
            for (j = 0; j &lt; cols; j++)
            {
                printf("%d ", arr1[i][j]);
            }
            printf("\n");
        }
    }

    printarow(2, cols, arr1); /* 這將調用函數以打印第2行（假設你至少有2行） */
    printf("\n");
    printarow(1, cols, arr1); /* 這將調用函數以打印第1行 */
    printf("\n");

    return 0;
}

void printarow(int row, int cols, int arr[8][8])
{
    /* 這是一個函數，可以從程序的任何地方調用 */
    /* 可以隨時多次調用 */
    /* 如果你需要多次執行相同的操作，它可以節省你重復編寫相同代碼的工作 */
    printf("第 %d 行是 ", row);

    for (int j = 0; j &lt; cols; j++)
    {
        printf("%d ", arr[row - 1][j]);
    }
}
</pre>
<p><img alt="" height="259" src="/images/螢幕擷取畫面 2023-12-21 050250.png" width="400"/></p><h1>C.EX2</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* 除法計算兩個浮點數的商 */
int main() {
    float this_is_a_number1, this_is_a_number2, total;

    // 提示用戶輸入一個數字
    printf("請輸入一個數字：\n");
    scanf("%f", &amp;this_is_a_number1); /* 讀取輸入的數字 */
    printf("您輸入了 %f\n", this_is_a_number1);

    // 提示用戶輸入另一個數字
    printf("請輸入另一個數字：\n");
    scanf("%f", &amp;this_is_a_number2); /* 讀取輸入的數字 */
    printf("您輸入了 %f\n", this_is_a_number2);

    // 計算兩個數字的商
    total = this_is_a_number1 / this_is_a_number2;

    // 輸出商
    printf("商為 %f\n", total);

    return 0;
}
</pre>
<p><img alt="" height="265" src="/images/螢幕擷取畫面 2023-12-21 051714.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int a = 1;
int A = 8;
int b = 2, c;
c = A - a + b;
/* 輸出 a, A, b, c 到螢幕 */
printf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );
return 0;
}</pre>
<p><img alt="" height="72" src="/images/螢幕擷取畫面 2023-12-21 051738.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
char x, y;
x = 'a';
y = (char)97;
/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */
printf( " x = %c, y = %c, ASCII of y = %d", x, y, y );
return 0;
}</pre>
<p><img alt="" height="80" src="/images/螢幕擷取畫面 2023-12-21 043041.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int a = 64;     // 十進制表示法
    int b = 0x40;   // 十六進制表示法
    long c = 64L;   // 使用 L 表示長整數

    // 使用 printf 函數輸出變數的值
    printf("%d, %d, %ld", a, b, c);

    return 0;
}
</pre>
<p><img alt="" height="118" src="/images/螢幕擷取畫面 2023-12-21 043147.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int i;

    // 提示用戶輸入一個整數
    printf("請輸入一個整數：");

    // 使用 scanf 函數讀取用戶輸入的整數並將其存儲到變數 i 中
    scanf("%d", &amp;i);

    // 使用 printf 函數輸出變數 i 的值
    printf("輸入的數字是：%d", i);

    return 0;
}
</pre>
<p><img alt="" height="115" src="/images/螢幕擷取畫面 2023-12-21 043240.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

int main() {
    int a, b;
    a = 10;
    b = 3;

    // 乘法
    printf("%d \n", a * b);

    // 除法
    printf("%d \n", a / b);

    // 加法
    printf("%d \n", a + b);

    // 減法
    printf("%d \n", a - b);

    // 取餘運算
    printf("%d \n", a % b);

    return 0;
}</pre>
<p><img caption="false" height="267" src="/images/螢幕擷取畫面 2023-12-21 043316.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int a = 10, b = 5;

    // 比較運算符的使用
    printf(" a == b is %d \n", a == b);   // 等於
    printf(" a &gt; b is %d \n", a &gt; b);     // 大於
    printf(" a &lt; b is %d \n", a &lt; b);     // 小於
    printf(" a &gt;= b is %d \n", a &gt;= b);   // 大於等於
    printf(" a &lt;= b is %d \n", a &lt;= b);   // 小於等於
    printf(" a != b is %d \n", a != b);   // 不等於
    printf("\n");

    // 修改 b 的值
    b = 10;

    // 再次進行比較
    printf(" a == b is %d \n", a == b);
    printf(" a &gt; b is %d \n", a &gt; b);
    printf(" a &lt; b is %d \n", a &lt; b);
    printf(" a &gt;= b is %d \n", a &gt;= b);
    printf(" a &lt;= b is %d \n", a &lt;= b);
    printf(" a != b is %d \n", a != b);

    return 0;
}
</pre>
<p><img alt="" height="554" src="/images/螢幕擷取畫面 2023-12-21 043401.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

void main() {
    int a, b;
    a = 15;
    b = 1;

    // 位元 OR 運算 (a OR b)
    printf("%d \n", a | b);

    // 位元 AND 運算 (a AND b)
    printf("%d \n", a &amp; b);

    // 位元 XOR 運算 (a XOR b)
    printf("%d \n", a ^ b);

    // 位元左移 1 位 (a 左移 1 位)
    printf("%d \n", a &lt;&lt; 1);

    // 位元右移 1 位 (a 右移 1 位)
    printf("%d \n", a &gt;&gt; 1);

    // a 的補數運算 (~a)
    printf("%d \n", ~a);
}
</pre>
<p><img alt="" height="278" src="/images/螢幕擷取畫面 2023-12-21 043423.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main() {
    int a;

    // 將 a 設為 3，然後對其進行邏輯 NOT 運算
    a = 3;
    printf("%d\n", !a);  // 非（NOT）運算，輸出 0

    // 將 a 設為 0，然後對其進行邏輯 NOT 運算
    a = 0;
    printf("%d\n", !a);  // 非（NOT）運算，輸出 1
}
</pre>
<p><img alt="" height="139" src="/images/螢幕擷取畫面 2023-12-21 043442.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main() {
    // 1 AND 3，兩個運算元都為真，結果為真（1）
    printf("%d\n", 1 &amp;&amp; 3);

    // 0 AND 0，其中一個運算元為假，結果為假（0）
    printf("%d\n", 0 &amp;&amp; 0);

    // 2 AND 2，兩個運算元都為真，結果為真（1）
    printf("%d\n", 2 &amp;&amp; 2);
}
</pre>
<p><img alt="" height="177" src="/images/螢幕擷取畫面 2023-12-21 043507.png" width="400"/></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>